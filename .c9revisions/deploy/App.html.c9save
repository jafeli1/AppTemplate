{"ts":1349361166778,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<!DOCTYPE html>\n<html>\n<head>\n    <title>CapacityNotification</title>\n\n    <script type=\"text/javascript\" src=\"/apps/2.0p4/sdk.js\"></script>\n\n    <script type=\"text/javascript\">\n        Rally.onReady(function() {\n            Ext.define('CustomApp', {\n                extend: 'Rally.app.App',\n                componentCls: 'app',\n                \n                launch: function() {\n                    var states = Ext.create('Ext.data.Store', {\n                        fields: ['name'],\n                        data : [\n                            {\"name\":\"85\"},\n                            {\"name\":\"100\"},\n                            {\"name\":\"0\"},\n                            {\"name\":\"ProjectManager\"}\n                        //...\n                        ]\n                    });\n            \n            \n                    this.stateCombo = this.add({\n                        xtype: 'combo',\n                        store: states,\n                        queryMode: 'local',\n                        displayField: 'name',\n                        valueField: 'name',\n                        listeners: {\n                            'select': this.onStateChange,\n                            scope: this\n                        }\n                    });\n                },\n                   \n                onStateChange: function(combo, record) {\n                    this.stateCombo.destroy();\n                    this.capacityNotificationView = Ext.create('Ext.panel.Panel', {\n                        bodyPadding: 20,\n                        border: 0,\n                        layout: 'hbox'\n                    });\n                    var state = record[0].get('name');\n                    if(state == '85') {\n                         Ext.create('CapacityUnderload', {\n                            viewport: this    \n                        });\n                    }\n                    if(state == '100') {\n                        Ext.create('CapacityOverload', {\n                            viewport: this\n                        });\n                    }\n                    if(state == '0') {\n                        Ext.create('OK', {\n                            viewport: this    \n                        });\n                    }\n                    if(state == 'ProjectManager') {\n                        Ext.create('ProjectManager', {\n                            viewport: this    \n                        });\n                    }\n            //        this._buildIterationCombo();\n            //\n            //        this.add(this.capacityNotificationView);\n                },\n                    \n            //    _buildIterationCombo: function() {\n            //        var iterationPanel = this.add({\n            //             xtype: 'panel',\n            //             border: 0,\n            //             bodyPadding: 10,\n            //        });\n            //        this.iterationCombo = iterationPanel.add({\n            //            xtype: 'rallyiterationcombobox',\n            //            listeners: {\n            //                ready: this._buildTaskGrid,\n            //                scope: this\n            //            }\n            //        });\n            //    },\n            //\n            //    \n            //    _buildTaskGrid: function() {\n            //        var query = this.iterationCombo.getQueryFromSelected();\n            //        Rally.data.ModelFactory.getModel({\n            //            type: 'Task',\n            //            scope: this,\n            //            success: function(taskModel) {\n            //                this.capacityNotificationView.add({\n            //                    xtype: 'rallygrid',\n            //                    model: taskModel,\n            //                    width: 500,\n            //                    columnCfgs: [\n            //                        'FormattedID',\n            //                        'Name',\n            //                        'Owner',\n            //                        'State'\n            //                    ],\n            //                    storeConfig: {\n            //                        filters: [{\n            //    \t\t\t\t        property: 'Owner',\n            //\t\t\t\t\t        value: Rally.environment.externalContext.user._ref\n            //\t\t\t\t\t    },\n            //                        query\n            //                        ]\n            //                    },\n            //                    listeners: {\n            //                        select:  this._updateBurndown,\n            //                        scope: this\n            //                    }\n            //                    \n            //                });\n            //                this._buildChartTaskBurndown();\n            //            }\n            //        });        \n            //    },\n            //    \n            //    _updateBurndown: function(scope, record) {\n            //        Ext.create('Rally.data.lookback.SnapshotStore', {\n            //            listeners: {\n            //                load: {\n            //                    fn: this._buildChart,\n            //                    scope:this\n            //                }\n            //            },\n            //        \n            //            autoLoad: true,\n            //            fetch: ['ToDo'],\n            //            start: 0,\n            //            rawFind: { FormattedID: record.get('FormattedID')}\n            //        });\n            //        var taskBurndownPanel = Ext.getCmp('taskBurndownPanel');\n            //        taskBurndownPanel.update(record.get(\"Name\"));\n            //    },\n            //    \n            //    _buildChartTaskBurndown: function() {\n            //        this.capacityNotificationView.add({\n            //            xtype: 'panel',\n            //            id: 'taskBurndownPanel',\n            //            itemId: 'taskBurndownPanel',\n            //            width: 500,\n            //            border: 0\n            //        });\n            //    },\n            //    \n            //    _createWorkProductFilter: function() {\n            //        return Ext.create('Rally.data.QueryFilter', {\n            //            property: 'WorkProduct',\n            //            value: \"https://hackathon.rallydev.com/slm/webservice/1.37/defect/6647967130\"\n            //        }).or({property: 'WorkProduct', value: \"https://hackathon.rallydev.com/slm/webservice/1.37/defect/8132425479\"\n            //        }).or({property: 'WorkProduct', value: \"https://hackathon.rallydev.com/slm/webservice/1.37/hierarchicalrequirement/91059529\"});\n            //    },\n            //    \n            //    convertGroupingsToRows: function(groups){\n            //        var rows = [];\n            //        \n            //        for(var group in groups){\n            //          if( groups.hasOwnProperty(group) ){\n            //            rows.push({\n            //              \"ToDo\": group,\n            //            });\n            //          }\n            //        }\n            //        \n            //        return { \"rows\": rows };\n            //      },\n            //\n            //    \n            //    _buildChart: function(store, records) {\n            //        var chartConfig = {\n            //            xtype : 'rallychart',\n            //            id : 'chart',\n            //\n            //            store: store,\n            //\n            //            height: 400,\n            //            series : [\n            //            {\n            //              type : 'column',\n            //              yField : 'ToDo',\n            //              name : 'Count',\n            //              visible : true\n            //            },\n            //            {\n            //              type : 'line',\n            //              yField : 'ToDo',\n            //              name : 'Count',\n            //              visible : true\n            //            }\n            //            ],\n            //            \n            //            xField : '_ValidFrom',\n            //            chartConfig : {\n            //              chart : {\n            //                marginRight : 130,\n            //                marginBottom : 250,\n            //                zoomType : 'x',\n            //                animation : {\n            //                  duration : 1500,\n            //                  easing : 'swing'\n            //                }\n            //              },\n            //              title : {\n            //                text : 'Schedule State Counts',\n            //                align: 'center'\n            //              },\n            //              xAxis : [{\n            //                title : {\n            //                  text : '_ValidFrom',\n            //                  margin : 40\n            //                },\n            //                labels : {\n            //                  align: 'right',\n            //                  rotation : 300\n            //                }\n            //              }],\n            //              yAxis : {\n            //                title : {\n            //                  text : 'Count'\n            //                },\n            //                plotLines : [{\n            //                  value : 0,\n            //                  width : 1,\n            //                  color : '#808080'\n            //                }]\n            //              },\n            //              plotOptions : {\n            //                  column: {\n            //                      color: '#F00'                              \n            //                  },\n            //                series : {\n            //                  animation : {\n            //                    duration : 3000,\n            //                    easing : 'swing'\n            //                  }\n            //                }\n            //              },\n            //              tooltip : {\n            //                formatter : function() {\n            //                  return this.x + ': ' + this.y;\n            //                }\n            //              },\n            //              legend : {\n            //                layout : 'vertical',\n            //                align : 'right',\n            //                verticalAlign : 'top',\n            //                x : -10,\n            //                y : 100,\n            //                borderWidth : 0\n            //              }\n            //            }\n            //          };\n            //        var chartHolder = this.down('#taskBurndownPanel');\n            //        chartHolder.removeAll(true);\n            //        chartHolder.add(chartConfig);\n            //    }\n            //    \n            });\n            Ext.define('CapacityOverload', {\n                \n                constructor: function(config) {\n                    this.initConfig(config);\n                    this.capacityNotificationView = Ext.create('Ext.panel.Panel', {\n                        bodyPadding: 20,\n                        border: 0,\n                        layout: 'hbox'\n                    });\n                    this.viewport = config.viewport;\n                    this._buildIterationCombo();\n                    \n                    this.viewport.add(this.capacityNotificationView);\n                },\n                \n                    \n                _buildIterationCombo: function() {\n                    var iterationPanel = this.viewport.add({\n                         xtype: 'panel',\n                         border: 0,\n                         bodyPadding: 10,\n                    });\n                    this.iterationCombo = iterationPanel.add({\n                        xtype: 'rallyiterationcombobox',\n                        listeners: {\n                            ready: this._buildTaskGrid,\n                            scope: this\n                        }\n                    });\n                },\n            \n                \n                _buildTaskGrid: function() {\n                    var query = this.iterationCombo.getQueryFromSelected();\n                    Rally.data.ModelFactory.getModel({\n                        type: 'Task',\n                        scope: this,\n                        success: function(taskModel) {\n                            this.capacityNotificationView.add({\n                                xtype: 'rallygrid',\n                                model: taskModel,\n                                width: 500,\n                                columnCfgs: [\n                                    'FormattedID',\n                                    'Name',\n                                    'Owner',\n                                    'State'\n                                ],\n                                storeConfig: {\n                                    filters: [{\n                    \t\t\t        property: 'Owner',\n            \t\t\t\t\t        value: Rally.environment.externalContext.user._ref\n            \t\t\t\t\t    },\n                                    query\n                                    ]\n                                },\n                                listeners: {\n                                    select:  this._updateBurndown,\n                                    scope: this\n                                }\n                                \n                            });\n                            this._buildChartTaskBurndown();\n                        }\n                    });        \n                },\n                \n                _updateBurndown: function(scope, record) {\n                    Ext.create('Rally.data.lookback.SnapshotStore', {\n                        listeners: {\n                            load: {\n                                fn: this._buildChart,\n                                scope:this\n                            }\n                        },\n                    \n                        autoLoad: true,\n                        fetch: ['ToDo'],\n                        start: 0,\n                        rawFind: { FormattedID: record.get('FormattedID')}\n                    });\n                    var taskBurndownPanel = Ext.getCmp('taskBurndownPanel');\n                    taskBurndownPanel.update(record.get(\"Name\"));\n                },\n                \n                _buildChartTaskBurndown: function() {\n                    this.capacityNotificationView.add({\n                        xtype: 'panel',\n                        id: 'taskBurndownPanel',\n                        itemId: 'taskBurndownPanel',\n                        width: 500,\n                        border: 0\n                    });\n                },\n                \n                _buildChart: function(store, records) {\n                    var fakeStore = this._getFakeStore(store, records);\n                    var chartConfig = {\n                        xtype : 'rallychart',\n                        id : 'chart',\n            \n            //            store: store,\n                        store: fakeStore,\n            \n                        height: 400,\n            \n                        series : [\n                            {\n                              type : 'line',\n                              yField : 'ToDo',\n                              name : 'To Do (h)',\n                              visible : true\n                            }\n                        ],\n                        \n                        xField : '_ValidFrom',\n                        chartConfig : {\n                           chart : {\n                            marginRight : 130,\n                            marginBottom : 250,\n                            zoomType : 'x',\n                            animation : {\n                              duration : 1500,\n                              easing : 'swing'\n                            }\n                          },\n                          title : {\n                            text : 'Task Burndown',\n                            align: 'center'\n                          },\n                          xAxis : [{\n                            title : {\n                              text : 'Days in Iteration',\n                              margin : 40\n                            },\n                            labels : {\n                              align: 'right',\n                              rotation : 300\n                            }\n                          }],\n                          yAxis : {\n                            title : {\n                              text : 'To Do (h)'\n                            },\n                            plotLines : [{\n                              value : 0,\n                              width : 1,\n                              color : '#808080'\n                            }]\n                          },\n                          plotOptions : {\n                              column: {\n                                  color: '#F00'                              \n                              },\n                            series : {\n                              animation : {\n                                duration : 3000,\n                                easing : 'swing'\n                              }\n                            }\n                          },\n                          tooltip : {\n                            formatter : function() {\n                              return this.x + ': ' + this.y;\n                            }\n                          },\n                          legend : {\n                            layout : 'vertical',\n                            align : 'right',\n                            verticalAlign : 'top',\n                            x : -10,\n                            y : 100,\n                            borderWidth : 0\n                          }\n                        \n                      }\n                    };\n                    var chartHolder = this.viewport.down('#taskBurndownPanel');\n                    chartHolder.removeAll(true);\n                    chartHolder.add(chartConfig);\n                },\n                \n                _getFakeStore: function(store, record) {\n                    var fakeStore = Ext.create('Ext.data.Store', {\n                        fields: ['ToDo', '_ValidFrom'],\n                        data : [\n                            {\"ToDo\":Math.floor(Math.random()*11), \"_ValidFrom\":\"10/09/2012\"},\n                            {\"ToDo\":Math.floor(Math.random()*11), \"_ValidFrom\":\"10/10/2012\"},\n                            {\"ToDo\":Math.floor(Math.random()*11), \"_ValidFrom\":\"10/11/2012\"},\n                            {\"ToDo\":Math.floor(Math.random()*11), \"_ValidFrom\":\"10/12/2012\"}\n                        ]\n                    });\n                    \n                    return fakeStore;\n                }\n                \n            });\n            Ext.define('CapacityUnderload', {\n                \n                constructor: function(config) {\n                \n                    this.viewport = config.viewport;\n                    \n                    this.viewport.add({\n                        xtype: 'panel',\n                        html: 'Oh no! you\\\\'re capacity is below 85!'\n                    });\n                }\n                   \n            });\n            Ext.define('OK', {\n                \n                constructor: function(config) {\n                    \n                    config.viewport.add({\n                        xtype: 'panel',\n                        html: 'Your capacity is OK :)'\n                    });\n                }\n                   \n            });\n            Ext.define('ProjectManager', {\n                \n                constructor: function(config) {\n                    this.viewport = config.viewport;\n                    this._buildIterationCombo();\n                },\n                \n                 _buildIterationCombo: function() {\n                    var iterationPanel = this.viewport.add({\n                         xtype: 'panel',\n                         border: 0,\n                         bodyPadding: 10,\n                    });\n                    this.iterationCombo = iterationPanel.add({\n                        xtype: 'rallyiterationcombobox',\n                        listeners: {\n                            ready: this._loadIterationCapacities,\n                            scope: this\n                        }\n                    });\n                },\n                \n                _loadIterationCapacities: function() {\n                     Rally.data.ModelFactory.getModel({\n                        type: 'Project',\n                        scope: this,\n                        success: function(projectModel) {\n                            projectModel.load(Rally.environment.externalContext.scope.project.ObjectID, {\n                                success: function(record) {\n                                    this._getUserIterationCapacity(record.get('TeamMembers'));\n                                },\n                                scope: this\n                            });\n            \n            //                Ext.create('Rally.data.WsapiDataStore', {\n            //                    model: projectModel,\n            //                    listeners: {\n            //                        load: {\n            //                            fn: this._onLoad,\n            //                            scope:this\n            //                        }\n            //                    },\n            //                    filters: [{\n            //                        property: 'Name',\n            //                        key: Rally.environment.externalContext.scope.project.Name\n            //                    }],\n            //                    autoLoad: true,\n            //                    fetch: ['ObjectId', 'TeamMembers']             \n            //                });\n                        }\n            //                this._buildChartTaskBurndown();\n                    });        \n                },\n            \n                \n                _getUserIterationCapacity: function(teamMembers) {\n                    this.teamMemberCount = teamMembers.length;\n                    this.iterationQuery = this.iterationCombo.getQueryFromSelected();\n                    Rally.data.ModelFactory.getModel({\n                        type: 'UserIterationCapacity',\n                        scope: this,\n                        success: function(userIterationCapacityModel) {\n                            for(var i = 0; i < teamMembers.length; i++) {\n                                Ext.create('Rally.data.WsapiDataStore', {\n                                    model: userIterationCapacityModel,\n                                    fetch: true,\n                                    filters: [\n                                        {\n                                            property: 'User',\n                                \n                                            value: teamMembers[i]._ref\n                                        },\n                                        this.iterationQuery\n                                    ],\n                                    autoLoad: true,\n                                    listeners: {\n                                       load: {\n                                            fn: this._onIterationCapacityLoad,\n                                            scope: this\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                        \n                    });\n                },\n                _onIterationCapacityLoad: function(record) {\n                    if(!this.iterationLoadCount) {\n                        this.iterationLoadCount = 0;\n                    }\n                    this.iterationLoadCount++;\n                    if(record.getItems().length > 0) {\n                        var capacityRecords = record.getItems();\n                        if(!this.capacityMap) {\n                            this.capacityMap = [];\n                        }\n                        var capacity = {};\n                        Ext.each(capacityRecords, function(item) {\n                            capacity.capacity = item['Capacity'];\n                            capacity.taskEstimates = item['TaskEstimates'];\n                            capacity.username = item['User']['_refObjectName'];\n                            capacity.userRef = item['User']['_ref'];\n                        }, this);\n                        this.capacityMap.push(capacity);\n                    }\n                    if(this.iterationLoadCount == this.teamMemberCount) {           \n                        this._useCapacityMap();\n                    }\n                },\n                _useCapacityMap: function() {\n             //** Need to wait for all loads to be finished and then create the Kanban app\n            //        if(capacityMap) {\n            //            this.viewport.add({\n            //                xtype: 'rallycardboard',\n            //                types: ['Tasks'],\n            //                attribute: 'State',\n            //                storeConfig: {\n            //                     filters: [\n            //                        {\n            //                            property: 'Iteration',\n            //                            value: this.iterationQuery\n            //                        },\n            //                        {\n            //                            property: 'User',\n            //                            value: capacityMap.userRef\n            //                            \n            //                        }\n            //                    ],\n            //                    fetch: '',\n            //                    pageSize: 200\n            //                }\n            //            });\n            //        }    \n                }\n            });\n\n            Rally.launchApp('CustomApp', {\n                name: 'CapacityNotification'\n            });\n        });\n    </script>\n\n    <style type=\"text/css\">\n        .app {\n             /* Add app styles here */\n        }\n    </style>\n</head>\n<body></body>\n</html>\n"]],"start1":0,"start2":0,"length1":0,"length2":26453}]],"length":26453}
{"contributors":[],"silentsave":false,"ts":1349361568905,"patch":[[{"diffs":[[0,"\t\t        value:"],[1," Rally.context ? Rally.context.user._ref :"],[0," Rally.environme"]],"start1":13032,"start2":13032,"length1":32,"length2":74},{"diffs":[[0," you"],[-1,"\\\\'re"],[1,"r"],[0," cap"]],"start1":19343,"start2":19343,"length1":13,"length2":9},{"diffs":[[0,".load(Rally."],[1,"context ? Rally.context.scope.project.ObjectID :Rally."],[0,"environment."]],"start1":20920,"start2":20920,"length1":24,"length2":78}]],"length":26545,"saved":false}
{"contributors":[],"silentsave":false,"ts":1349376850909,"patch":[[{"diffs":[[0,"    "],[-1,"//...\n                        "],[0,""],[1,""],[0,"]\n  "]],"start1":725,"start2":725,"length1":38,"length2":8},{"diffs":[[0,"    "],[-1,"//        this._buildIterationCombo();\n            //\n            //        this.add(this.capacityNotificationView);\n                },\n                    \n            //    _buildIterationCombo: function() {\n            //        var iterationPanel = this.add({\n            //             xtype: 'panel',\n            //             border: 0,\n            //             bodyPadding: 10,\n            //        });\n            //        this.iterationCombo = iterationPanel.add({\n            //            xtype: 'rallyiterationcombobox',\n            //            listeners: {\n            //                ready: this._buildTaskGrid,\n            //                scope: this\n            //            }\n            //        });\n            //    },\n            //\n            //    \n            //    _buildTaskGrid: function() {\n            //        var query = this.iterationCombo.getQueryFromSelected();\n            //        Rally.data.ModelFactory.getModel({\n            //            type: 'Task',\n            //            scope: this,\n            //            success: function(taskModel) {\n            //                this.capacityNotificationView.add({\n            //                    xtype: 'rallygrid',\n            //                    model: taskModel,\n            //                    width: 500,\n            //                    columnCfgs: [\n            //                        'FormattedID',\n            //                        'Name',\n            //                        'Owner',\n            //                        'State'\n            //                    ],\n            //                    storeConfig: {\n            //                        filters: [{\n            //    \t\t\t\t        property: 'Owner',\n            //\t\t\t\t\t        value: Rally.environment.externalContext.user._ref\n            //\t\t\t\t\t    },\n            //                        query\n            //                        ]\n            //                    },\n            //                    listeners: {\n            //                        select:  this._updateBurndown,\n            //                        scope: this\n            //                    }\n            //                    \n            //                });\n            //                this._buildChartTaskBurndown();\n            //            }\n            //        });        \n            //    },\n            //    \n            //    _updateBurndown: function(scope, record) {\n            //        Ext.create('Rally.data.lookback.SnapshotStore', {\n            //            listeners: {\n            //                load: {\n            //                    fn: this._buildChart,\n            //                    scope:this\n            //                }\n            //            },\n            //        \n            //            autoLoad: true,\n            //            fetch: ['ToDo'],\n            //            start: 0,\n            //            rawFind: { FormattedID: record.get('FormattedID')}\n            //        });\n            //        var taskBurndownPanel = Ext.getCmp('taskBurndownPanel');\n            //        taskBurndownPanel.update(record.get(\"Name\"));\n            //    },\n            //    \n            //    _buildChartTaskBurndown: function() {\n            //        this.capacityNotificationView.add({\n            //            xtype: 'panel',\n            //            id: 'taskBurndownPanel',\n            //            itemId: 'taskBurndownPanel',\n            //            width: 500,\n            //            border: 0\n            //        });\n            //    },\n            //    \n            //    _createWorkProductFilter: function() {\n            //        return Ext.create('Rally.data.QueryFilter', {\n            //            property: 'WorkProduct',\n            //            value: \"https://hackathon.rallydev.com/slm/webservice/1.37/defect/6647967130\"\n            //        }).or({property: 'WorkProduct', value: \"https://hackathon.rallydev.com/slm/webservice/1.37/defect/8132425479\"\n            //        }).or({property: 'WorkProduct', value: \"https://hackathon.rallydev.com/slm/webservice/1.37/hierarchicalrequirement/91059529\"});\n            //    },\n            //    \n            //    convertGroupingsToRows: function(groups){\n            //        var rows = [];\n            //        \n            //        for(var group in groups){\n            //          if( groups.hasOwnProperty(group) ){\n            //            rows.push({\n            //              \"ToDo\": group,\n            //            });\n            //          }\n            //        }\n            //        \n            //        return { \"rows\": rows };\n            //      },\n            //\n            //    \n            //    _buildChart: function(store, records) {\n            //        var chartConfig = {\n            //            xtype : 'rallychart',\n            //            id : 'chart',\n            //\n            //            store: store,\n            //\n            //            height: 400,\n            //            series : [\n            //            {\n            //              type : 'column',\n            //              yField : 'ToDo',\n            //              name : 'Count',\n            //              visible : true\n            //            },\n            //            {\n            //              type : 'line',\n            //              yField : 'ToDo',\n            //              name : 'Count',\n            //              visible : true\n            //            }\n            //            ],\n            //            \n            //            xField : '_ValidFrom',\n            //            chartConfig : {\n            //              chart : {\n            //                marginRight : 130,\n            //                marginBottom : 250,\n            //                zoomType : 'x',\n            //                animation : {\n            //                  duration : 1500,\n            //                  easing : 'swing'\n            //                }\n            //              },\n            //              title : {\n            //                text : 'Schedule State Counts',\n            //                align: 'center'\n            //              },\n            //              xAxis : [{\n            //                title : {\n            //                  text : '_ValidFrom',\n            //                  margin : 40\n            //                },\n            //                labels : {\n            //                  align: 'right',\n            //                  rotation : 300\n            //                }\n            //              }],\n            //              yAxis : {\n            //                title : {\n            //                  text : 'Count'\n            //                },\n            //                plotLines : [{\n            //                  value : 0,\n            //                  width : 1,\n            //                  color : '#808080'\n            //                }]\n            //              },\n            //              plotOptions : {\n            //                  column: {\n            //                      color: '#F00'                              \n            //                  },\n            //                series : {\n            //                  animation : {\n            //                    duration : 3000,\n            //                    easing : 'swing'\n            //                  }\n            //                }\n            //              },\n            //              tooltip : {\n            //                formatter : function() {\n            //                  return this.x + ': ' + this.y;\n            //                }\n            //              },\n            //              legend : {\n            //                layout : 'vertical',\n            //                align : 'right',\n            //                verticalAlign : 'top',\n            //                x : -10,\n            //                y : 100,\n            //                borderWidth : 0\n            //              }\n            //            }\n            //          };\n            //        var chartHolder = this.down('#taskBurndownPanel');\n            //        chartHolder.removeAll(true);\n            //        chartHolder.add(chartConfig);\n            //    }\n            //"],[1,"    }\n                "],[0,"    "]],"start1":2427,"start2":2427,"length1":8382,"length2":30},{"diffs":[[0,"       layout: '"],[-1,"hbox"],[1,"column"],[0,"'\n              "]],"start1":2806,"start2":2806,"length1":36,"length2":38},{"diffs":[[0,"         width: "],[1,"'"],[0,"50"],[-1,"0"],[1,"%'"],[0,",\n              "]],"start1":4206,"start2":4206,"length1":35,"length2":37},{"diffs":[[0,"lly."],[-1,"context ? Rally.context.user._ref : Rally.environment.externalContext.u"],[1,"environment.getContext().getU"],[0,"ser"],[1,"()"],[0,"._re"]],"start1":4673,"start2":4673,"length1":82,"length2":42},{"diffs":[[0," width: "],[1,"'"],[0,"50"],[-1,"0"],[1,"%'"],[0,",\n      "]],"start1":6314,"start2":6314,"length1":19,"length2":21},{"diffs":[[0,"   \n            "],[-1,"//"],[0,"            stor"]],"start1":6684,"start2":6684,"length1":34,"length2":32},{"diffs":[[0,"re,\n            "],[1,"//"],[0,"            stor"]],"start1":6722,"start2":6722,"length1":32,"length2":34},{"diffs":[[0,"lly."],[-1,"context ? Rally.context.scope.project.ObjectID :Rally.environment.externalContext.s"],[1,"environment.getContext().getS"],[0,"cope"],[1,"()"],[0,".pro"]],"start1":12512,"start2":12512,"length1":95,"length2":43},{"diffs":[[0,"    "],[-1,"//                Ext.create('Rally.data.WsapiDataStore', {\n            //                    model: projectModel,\n            //                    listeners: {\n            //                        load: {\n            //                            fn: this._onLoad,\n            //                            scope:this\n            //                        }\n            //                    },\n            //                    filters: [{\n            //                        property: 'Name',\n            //                        key: Rally.environment.externalContext.scope.project.Name\n            //                    }],\n            //                    autoLoad: true,\n            //                    fetch: ['ObjectId', 'TeamMembers']             \n            //                });\n                        }\n            //                this._buildChartTaskBurndown();"],[1,"            }"],[0,"\n   "]],"start1":12859,"start2":12859,"length1":895,"length2":21}]],"length":17203,"saved":false}
